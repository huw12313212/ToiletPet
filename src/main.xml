<?xml version="1.0" encoding="utf-8"?>
<!--
  Copyright 2011-2014 Marvell Semiconductor, Inc.

  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->
<program xmlns="http://www.kinoma.com/kpr/1">

	<require path="themes/sample/theme" id="THEME"/>
	<require path="mobile/scroller" id="SCROLLER"/>

<!-- ++++++++++++++++++++++++++++++++++++++++++++++++++ -->
<!-- ASSETS -->
<!-- ++++++++++++++++++++++++++++++++++++++++++++++++++ -->
    
	<skin id="whiteSkin" color="white"/>

	<style id="defaultStyle" align="left"/>w

<!-- ++++++++++++++++++++++++++++++++++++++++++++++++++ -->
<!-- BEHAVIORS -->
<!-- ++++++++++++++++++++++++++++++++++++++++++++++++++ -->
    
	<behavior id="ApplicationBehavior">
		<method id="onLaunch" params="application"><![CDATA[
			application.shared = true;
		]]></method>
		<method id="onQuit" params="application"><![CDATA[
			application.shared = false;
		]]></method>
	</behavior>

<!-- ++++++++++++++++++++++++++++++++++++++++++++++++++ -->
<!-- HANDLERS -->
<!-- ++++++++++++++++++++++++++++++++++++++++++++++++++ -->

	<handler path="/info">
		<behavior>
			<method id="onInvoke" params="handler, message"><![CDATA[
				message.responseText = JSON.stringify( { port: serverPort, name: serverName } );            
			]]></method>
		</behavior>
	</handler>
	
<!-- ++++++++++++++++++++++++++++++++++++++++++++++++++ -->
<!-- LAYOUTS -->
<!-- ++++++++++++++++++++++++++++++++++++++++++++++++++ -->

	<container id="ChatServer" left="0" top="0" right="0" bottom="0" skin="whiteSkin" style="defaultStyle">
		<behavior>
			<method id="log" params="container, text, color">
                <![CDATA[
					if (!color) color = '#000';
			
					var block = new Text({left: 4, right: 4, top: 0});
					block.string = text;
					block.style = new Style("18px Arial", color);
			
					var column = container.first.first;
					if (column.first) {
						column.insert(block, column.first);
					} else {
						column.add(block);
					}
                ]]>
            </method>
        </behavior>
		<scroller like="SCROLLER.VerticalScroller" left="4" right="4" top="0" bottom="0" clip="true" active="true">
			<column left="0" right="0" top="0">
			</column>
		</scroller>
	</container>

<!-- ++++++++++++++++++++++++++++++++++++++++++++++++++ -->
<!-- MODEL -->
<!-- ++++++++++++++++++++++++++++++++++++++++++++++++++ -->

	<script><![CDATA[
	
var ImageDictionary = {};

//Constructor
var BallBehavior = function (delta) {
	this.dx = delta;
	this.dy = delta;
}

	//BallBehavior Definition
	BallBehavior.prototype = Object.create(Object.prototype, {
		dx: { value: 5, writable: true },
		dy: { value: 5, writable: true },
		x: { value: 0, writable: true },
		y: { value: 0, writable: true },
		width: { value: 0, writable: true },
		height: { value: 0, writable: true },
		lerpRatio: { value: 0.3, writable: true },
		onDisplaying: {
			value: function(ball) {
				ball.start();
				this.width = ball.container.width - ball.width;
				this.height = ball.container.height - ball.height;
			}
		},
		onTimeChanged: {
			value: function(ball) 
			{
				var lerpingX = this.x * this.lerpRatio + ball.position.x * (1-this.lerpRatio);
				var lerpingY = this.y * this.lerpRatio + ball.position.y * (1-this.lerpRatio);
				ball.position = {x:lerpingX,y:lerpingY};
			}
		},
	});
	
	
	var build = function(container) {
	container.skin = new Skin("white");
	
	
	var ballTexture = new Texture("balls.png");
																		//Variants - Horizontal Offset   //States - Vertical Offset
	var ballSkin = new Skin(ballTexture, {x:0, y:0, width:30, height:30}, 30, 0);
	var ball = new Content({left:0, width: 30, top: 0, height: 30}, ballSkin);
	ball.behavior = new BallBehavior(6);
	ball.variant = 0;
	container.add(ball);
	ImageDictionary["ball"] = ball.behavior;


}
	
	
	
	
	
	
		// port will be chosen from 9300 to 9399
		var serverPort = 9300 + Math.floor(Math.random() * 100);
		var serverName = "Chat room #" + serverPort;
		trace(serverName);

		application.behavior = 
		{
			onAdapt: function(application) {
				application.empty();
				build(application);
			},
			onLaunch: function(application) {
				build(application);
				application.shared = true;
			},
			onQuit: function(application)
			{
				application.shared = false;
			}
		}
		
		var data = {};
		var stage = new ChatServer(data);
		//application.add(stage);
	
		var messages = [];
		var connections = [];
	
		var log = function(text, color) {
			stage.delegate('log', text, color);
		};
	
		var randomHex = function() {
			return Math.floor(Math.random() * 12).toString(16); 
		};
		
		var randomColor = function() {
			return '#' + randomHex() + randomHex() + randomHex();  
		};
		
		var server = new WebSocketServer(serverPort);
		server.onlaunch = function() {
			log("server is ready to accept new connection");
		};
		server.onconnect = function(conn, options) {
			//log("-CONNECT");
			trace("Contronller Connected \n");
	
			var user = undefined;
			var color = undefined;
	
			var send = function(conn, type, data) {
				conn.send(JSON.stringify({type: type, data: data}));
			};
	
			conn.onopen = function() {
				log("-OPEN");
			};
	
			conn.onmessage = function(e) {
			
			
				ImageDictionary["ball"].x += 10;
			};
	
			conn.onclose = function(e) {
				//if (user) log("-GONE: " + user);
	
				var i = connections.indexOf(conn);
				if (i >= 0) connections.splice(i, 1);
			};
	
			conn.onerror = function(e) {
				log("-ERROR", '#f00');
				conn.close();
			};
		};
	
		log("server is launching on port " + serverPort);
	]]></script>
</program>
