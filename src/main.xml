<?xml version="1.0" encoding="utf-8"?>
<!--
  Copyright 2011-2014 Marvell Semiconductor, Inc.

  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->
<program xmlns="http://www.kinoma.com/kpr/1">

	<require path="themes/sample/theme" id="THEME"/>
	<require path="mobile/scroller" id="SCROLLER"/>

<!-- ++++++++++++++++++++++++++++++++++++++++++++++++++ -->
<!-- ASSETS -->
<!-- ++++++++++++++++++++++++++++++++++++++++++++++++++ -->
    
	<skin id="whiteSkin" color="white"/>

	<style id="defaultStyle" align="left"/>w

<!-- ++++++++++++++++++++++++++++++++++++++++++++++++++ -->
<!-- BEHAVIORS -->
<!-- ++++++++++++++++++++++++++++++++++++++++++++++++++ -->
    
	<behavior id="ApplicationBehavior">
		<method id="onLaunch" params="application"><![CDATA[
			application.shared = true;
		]]></method>
		<method id="onQuit" params="application"><![CDATA[
			application.shared = false;
		]]></method>
	</behavior>

<!-- ++++++++++++++++++++++++++++++++++++++++++++++++++ -->
<!-- HANDLERS -->
<!-- ++++++++++++++++++++++++++++++++++++++++++++++++++ -->

	<handler path="/info">
		<behavior>
			<method id="onInvoke" params="handler, message"><![CDATA[
				message.responseText = JSON.stringify( { port: serverPort, name: serverName } );            
			]]></method>
		</behavior>
	</handler>
	
<!-- ++++++++++++++++++++++++++++++++++++++++++++++++++ -->
<!-- LAYOUTS -->
<!-- ++++++++++++++++++++++++++++++++++++++++++++++++++ -->

	<container id="ChatServer" left="0" top="0" right="0" bottom="0" skin="whiteSkin" style="defaultStyle">
		<behavior>
			<method id="log" params="container, text, color">
                <![CDATA[
					if (!color) color = '#000';
			
					var block = new Text({left: 4, right: 4, top: 0});
					block.string = text;
					block.style = new Style("18px Arial", color);
			
					var column = container.first.first;
					if (column.first) {
						column.insert(block, column.first);
					} else {
						column.add(block);
					}
                ]]>
            </method>
        </behavior>
		<scroller like="SCROLLER.VerticalScroller" left="4" right="4" top="0" bottom="0" clip="true" active="true">
			<column left="0" right="0" top="0">
			</column>
		</scroller>
	</container>

<!-- ++++++++++++++++++++++++++++++++++++++++++++++++++ -->
<!-- MODEL -->
<!-- ++++++++++++++++++++++++++++++++++++++++++++++++++ -->

	<script><![CDATA[
	
var ImageDictionary = {};
var SoundDictionary = {};
var currentPic;

var sound;

sound = new Sound( mergeURI( application.url, "assets/ahahaha.mp3" ));
SoundDictionary["assets/ahahaha.mp3"] = sound;

sound = new Sound( mergeURI( application.url, "assets/Shutter-02.wav" ));
SoundDictionary["assets/Shutter-02.wav"] = sound;




Sound.volume = 1.0;


//Constructor
var BallBehavior = function () {
	

}

	//BallBehavior Definition
	BallBehavior.prototype = Object.create(Object.prototype, {
		dx: { value: 5, writable: true },
		dy: { value: 5, writable: true },
		x: { value: 0, writable: true },
		y: { value: 0, writable: true },
		width: { value: 0, writable: true },
		height: { value: 0, writable: true },
		//lerpRatio: { value: 0.3, writable: true },
		lerpRatio: { value: 1, writable: true },
		main: { value: false, writable: true },
		onDisplaying: {
			value: function(image) {
				image.start();
			}
		},
		onTimeChanged: {
			value: function(image) 
			{
				
				var lerpingX = (this.x-image.width/2) * this.lerpRatio + image.position.x * (1-this.lerpRatio);
				var lerpingY = (this.y-image.height/2) * this.lerpRatio + image.position.y * (1-this.lerpRatio);
				image.position = {x:lerpingX,y:lerpingY};
				
				
				
				if(this.main)
				{
					var currentAnimationData = animationDefinition[CurrentAnimation];
					var currentState = currentAnimationData[AnimationIndex];
					var time = currentState.time;
					
					if(time == -1)return;
					
					AnimationCounter++;
					
					if(AnimationCounter>=time)
					{
						AnimationCounter = 0;
						AnimationIndex++;
						AnimationIndex = AnimationIndex%currentAnimationData.length;
						currentState = currentAnimationData[AnimationIndex];
						setCurrent(currentState.name);
					}
					
					//trace("main");
				}
			
				
			}
		},
	});
	
	var setCurrent = function(name)
	{
		if(currentPic == name)return;
	
		var current;
			if(currentPic != null)
			{
			    current = ImageDictionary[currentPic];
				current.lerpRatio = 1;
				current.x = 1000;
				current.y = 1000;
			}
			
			currentPic = name;
			current = ImageDictionary[name];
			current.lerpRatio = 1;
			current.x = 340/2;
			current.y = 240/2;
	}
	
	
	var images = ["0normal-1","0normal-2","0normal-3","0normal-4",
				  "1leftRight-1","1leftRight-2","1leftRight-3","1leftRight-4",
				  "2happy-1","2happy-2","2happy-3",
				  "3angry-1","3angry-2","3angry-3"];
				  
	var animationDefinition = 
	{
		"Normal" : [{"name":"0normal-1","time":3},
					{"name":"0normal-2","time":3},
					{"name":"0normal-3","time":3},
					{"name":"0normal-4","time":3},
					{"name":"0normal-3","time":3},
					{"name":"0normal-2","time":3},
					{"name":"0normal-1","time":120},
					],
		"LeftRight" : [{"name":"1leftRight-1","time":3},
					{"name":"1leftRight-2","time":20},
					{"name":"1leftRight-1","time":3},
					{"name":"1leftRight-3","time":20},
					{"name":"1leftRight-4","time":120},
					],
		"Happy" : [{"name":"2happy-1","time":3},
			{"name":"2happy-2","time":3},
			{"name":"2happy-3","time":3},
			{"name":"2happy-2","time":3},
			{"name":"2happy-1","time":180},
			],
		"Angry" : [{"name":"3angry-1","time":3},
			{"name":"3angry-2","time":3},
			{"name":"3angry-3","time":3},
			{"name":"3angry-2","time":3},
			{"name":"3angry-1","time":180},
			],
		"All": [{"name":"0normal-1","time":3},
					{"name":"0normal-2","time":3},
					{"name":"0normal-3","time":3},
					{"name":"0normal-4","time":3},
					{"name":"0normal-3","time":3},
					{"name":"0normal-2","time":3},
					{"name":"0normal-1","time":120},
					{"name":"1leftRight-1","time":3},
					{"name":"1leftRight-2","time":20},
					{"name":"1leftRight-1","time":3},
					{"name":"1leftRight-3","time":20},
					{"name":"1leftRight-4","time":120},
					{"name":"2happy-1","time":3},
					{"name":"2happy-2","time":3},
					{"name":"2happy-3","time":3},
					{"name":"2happy-2","time":3},
					{"name":"2happy-1","time":180},
					{"name":"3angry-1","time":3},
					{"name":"3angry-2","time":3},
					{"name":"3angry-3","time":3},
					{"name":"3angry-2","time":3},
					{"name":"3angry-1","time":180},
			],
					
					
		
	};
	
	var CurrentAnimation; //"Normal";
	var AnimationCounter = 0;
	var AnimationIndex = 0;
	
	var PlayAnimation = function(animationName)
	{

		CurrentAnimation = animationName;
		AnimationCounter = 0;
		AnimationIndex = 0;
		
		var currentAnimationData = animationDefinition[CurrentAnimation];
		var currentState = currentAnimationData[AnimationIndex];
		setCurrent(currentState.name);
	}
	
	var build = function(container) {
	container.skin = new Skin("white");
	
	var eyeTexture;
	var eyeSkin;
	var eye;
	
	for(var i = 0 ; i<images.length ; i++)
	{
		var image = images[i];
	
		eyeTexture = new Texture(image+".png");																	//Variants - Horizontal Offset   //States - Vertical Offset
	    eyeSkin = new Skin(eyeTexture, {x:0, y:0, width:237, height:240}, 0, 0);
	    eye = new Content({left:0, width: 237, top: 0, height: 240}, eyeSkin);
		//eye.scale = {x:2,y:2};
		eye.behavior = new BallBehavior();

		eye.variant = 0;
		container.add(eye);
		ImageDictionary[image] = eye.behavior;
		
		if(i==0)
		{
			eye.behavior.main = true;
		}
		
			eye.behavior.x = 1000;
			eye.behavior.y = 1000;
		
		//ImageDictionary["eye"] = eye.behavior;
	}
	
	//setCurrent("0normal-1");
	PlayAnimation("All");

	
	trace("Screen Resolution:"+container.width + ":" + container.height);
	
	
		application.invoke(new MessageWithObject( "pins:configure", {
		    light1: {
		        require: "led",
		        pins: {
		            led: {pin: 3}
		        }
		    },
		    light2: {
		        require: "led",
		        pins: {
		            led: {pin: 4}
		        }
		    }
		}));
		
		
		
		application.invoke(new MessageWithObject("pins:/light1/turnOn"));
		application.invoke(new MessageWithObject("pins:/light2/turnOn"));
}
	
var executeCommand = function (data)
{
	command = data.command;
	switch(command)
	{
		case "updatePosition":
		
			var target = data.target;
			var x = data.x;
			var y = data.y;
			ImageDictionary[target].x = x - ImageDictionary[target].width/2;
			ImageDictionary[target].y = y - ImageDictionary[target].height/2;
			//trace("move "+target + " to ("+x+":"+y+")");
		break;
		case "playSound":
			
			var target = data.target;
			var currentSound = SoundDictionary[target];
			var volume = data.volume;
			Sound.volume = volume;
			currentSound.play();
			
		break;
		case "servo":
			var target = data.target;
			var value = data.value;

				if(value)
				{
					application.invoke(new MessageWithObject("pins:/light1/turnOn"));
					application.invoke(new MessageWithObject("pins:/light2/turnOn"));
					trace("turn on \n");
				}
				else
				{
					application.invoke(new MessageWithObject("pins:/light1/turnOff"));
					application.invoke(new MessageWithObject("pins:/light2/turnOff"));
					trace("turn off \n");             m,                                                                 
				}
		break;
		
		default:
		break;
	}
}
	
		// port will be chosen from 9300 to 9399
		var serverPort = 9300;
		//var serverName = "Server Port:" + serverPort;
		trace("Server Port"+serverPort);

		application.behavior = 
		{
			onAdapt: function(application) {
				//application.empty();
				build(application);
				
				
			},
			onLaunch: function(application) 
			{
				//build(application);
				application.shared = true;
			},
			onQuit: function(application)
			{
				application.shared = false;
			}
		}
		
		
		var server = new WebSocketServer(serverPort);
		server.onlaunch = function() {
			//log("server is ready to accept new connection");
		};
		server.onconnect = function(conn, options) {
		
			//sound.play();
			//log("-CONNECT");
			trace("Contronller Connected \n");
	
			var user = undefined;
			var color = undefined;
	
			var send = function(conn, type, data) {
				conn.send(JSON.stringify({type: type, data: data}));
			};
	
			conn.onopen = function() {
				//log("-OPEN");
			};
	
			conn.onmessage = function(e) {
			
				var message = JSON.parse(e.data);
			
				executeCommand(message);
				//trace("command:"+message.command);
				//ImageDictionary["eye"].x += 10;
			};
	
			conn.onclose = function(e) {
			trace("Connection Closed \n");
	
				var i = connections.indexOf(conn);
				if (i >= 0) connections.splice(i, 1);
			};
	
			conn.onerror = function(e) {
			trace("Connection Error \n");
				//log("-ERROR", '#f00');
				conn.close();
			};
		};
	
		log("server is launching on port " + serverPort);
		

		
		/*
	  application.invoke( new MessageWithObject( "pins:configure", {
	    	motor: {
	            require: "servo",
	            pins: {
	                servo: { pin: 28 }
	            }
	        }
	    }));
		
		application.invoke(new MessageWithObject("pins:/motor/rotate"));*/	
		
	]]></script>
</program>
